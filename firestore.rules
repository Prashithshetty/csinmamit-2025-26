rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check for admin
    function isAdmin() {
      return request.auth != null 
        && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == "admin";
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Validate string field length
    function isValidStringLength(field, minLen, maxLen) {
      return field is string && 
             field.size() >= minLen && 
             field.size() <= maxLen;
    }
    
    // Validate email format (basic check)
    function isValidEmail(email) {
      return email is string && 
             email.matches('.*@.*\\..*') && 
             email.size() <= 254;
    }
    
    // Validate phone number (basic check)
    function isValidPhone(phone) {
      return phone is string && 
             phone.matches('[0-9+\\-\\s()]+') && 
             phone.size() >= 10 && 
             phone.size() <= 20;
    }
    
    // Validate USN format (adjust pattern as needed)
    function isValidUSN(usn) {
      return usn is string && 
             usn.matches('[0-9A-Z]+') && 
             usn.size() >= 8 && 
             usn.size() <= 15;
    }
    
    // Check if only allowed fields are being updated
    function onlyUpdatingFields(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
    
    // Rate limiting helper (basic implementation)
    function isWithinRateLimit() {
      // This is a basic check - for production, consider using external rate limiting
      return request.time > resource.data.get('lastUpdated', timestamp.value(0)) + duration.value(1, 's');
    }
    
    // ============================================================================
    // USER PROFILES
    // ============================================================================
    
    match /registrations/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /users/{userId} {
      // Owners and admins access
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isValidUserData(request.resource.data);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();

      // Validate user data structure and content
       function isValidUserData(data) {
        return data.keys().hasOnly(['name', 'email', 'bio', 'branch', 'usn', 'github', 'linkedin', 'phone', 'role', 'certificates', 'createdAt', 'updatedAt']) &&
               isValidStringLength(data.name, 1, 100) &&
               (data.email == null || isValidEmail(data.email)) &&
               (data.bio == null || isValidStringLength(data.bio, 0, 500)) &&
               (data.branch == null || isValidStringLength(data.branch, 0, 100)) &&
               (data.usn == null || isValidUSN(data.usn)) &&
               (data.github == null || isValidStringLength(data.github, 0, 200)) &&
               (data.linkedin == null || isValidStringLength(data.linkedin, 0, 200)) &&
               (data.phone == null || isValidPhone(data.phone)) &&
                (data.role == null || data.role in ['User', 'EXECUTIVE MEMBER', 'member', 'core', 'admin']) &&
               (data.certificates == null || data.certificates is list) &&
               (data.createdAt == null || data.createdAt is timestamp) &&
               (data.updatedAt == null || data.updatedAt is timestamp);
      }
      
      function isValidUserUpdate(newData, oldData) {
        return isValidUserData(newData) &&
               newData.createdAt == oldData.createdAt;
      }
    }
    
    // ============================================================================
    // CORE TEAM MEMBERS
    // ============================================================================
    
    match /core/{document=**} {
      // Public read access for displaying team
      allow read: if true;
      
      // Authenticated users can write core team data
      allow write: if isAuthenticated() && isValidCoreTeamData(request.resource.data);
      
      function isValidCoreTeamData(data) {
        return data.keys().hasOnly(['name', 'position', 'bio', 'image', 'github', 'linkedin', 'email', 'order', 'active', 'year', 'createdAt', 'updatedAt']) &&
               isValidStringLength(data.name, 1, 100) &&
               isValidStringLength(data.position, 1, 100) &&
               (data.bio == null || isValidStringLength(data.bio, 0, 1000)) &&
               (data.image == null || isValidStringLength(data.image, 0, 500)) &&
               (data.github == null || isValidStringLength(data.github, 0, 200)) &&
               (data.linkedin == null || isValidStringLength(data.linkedin, 0, 200)) &&
               (data.email == null || isValidEmail(data.email)) &&
               (data.order == null || data.order is number) &&
               (data.active == null || data.active is bool) &&
               (data.year == null || data.year is number);
      }
    }
    
    // ============================================================================
    // TEAM MEMBERS
    // ============================================================================
    
    match /team-members/{document=**} {
      // Public read access for displaying team
      allow read: if true;
      
      // Authenticated users can create team member entries (for applications)
      allow create: if isAuthenticated() && isValidTeamMemberData(request.resource.data);
      
      // Authenticated users can update/delete team member data
      allow update, delete: if isAuthenticated();
      
      function isValidTeamMemberData(data) {
        return data.keys().hasOnly(['name', 'position', 'bio', 'image', 'github', 'linkedin', 'email', 'usn', 'branch', 'year', 'active', 'approved', 'createdAt', 'updatedAt']) &&
               isValidStringLength(data.name, 1, 100) &&
               (data.position == null || isValidStringLength(data.position, 0, 100)) &&
               (data.bio == null || isValidStringLength(data.bio, 0, 500)) &&
               (data.image == null || isValidStringLength(data.image, 0, 500)) &&
               (data.github == null || isValidStringLength(data.github, 0, 200)) &&
               (data.linkedin == null || isValidStringLength(data.linkedin, 0, 200)) &&
               (data.email == null || isValidEmail(data.email)) &&
               (data.usn == null || isValidUSN(data.usn)) &&
               (data.branch == null || isValidStringLength(data.branch, 0, 100)) &&
               (data.year == null || data.year is number) &&
               (data.active == null || data.active is bool) &&
               (data.approved == null || data.approved is bool);
      }
    }
    
    // ============================================================================
    // EVENTS
    // ============================================================================
    
    match /events/{eventId} {
      // Public read access for displaying events
      allow read: if true;

      // CREATE: require full valid payload
      allow create: if request.auth != null && isValidEventData(request.resource.data);

      // UPDATE: allow partial updates (only selected fields), keep createdAt immutable
      allow update: if request.auth != null && isValidEventUpdate(request.resource.data, resource.data);

      // DELETE: allow signed-in (tighten to isAdmin() for prod)
      allow delete: if request.auth != null;

      function isValidEventData(data) {
        return data.keys().hasOnly([
          'title','description','brief','image','cloudinaryUrl','originalImagePath',
          'date','time','venue','category','type','entryFee','organizers',
          'contactPersons','year','published','registrationsAvailable',
          'participants','participantCount','searchTitle','searchDescription',
          'status','featured','createdAt','updatedAt'
        ]) &&
          isValidStringLength(data.title, 1, 200) &&
          isValidStringLength(data.description, 1, 5000) &&
          (data.brief == null || isValidStringLength(data.brief, 0, 1000)) &&
          (data.image == null || isValidStringLength(data.image, 0, 1000)) &&
          (data.cloudinaryUrl == null || isValidStringLength(data.cloudinaryUrl, 0, 1000)) &&
          (data.venue == null || isValidStringLength(data.venue, 0, 200)) &&
          (data.category == null || data.category in ['PREVIOUS','UPCOMING','CURRENT','ONGOING']) &&
          (data.type == null || data.type in ['SOLO','TEAM','INDIVIDUAL','WORKSHOP','SEMINAR','COMPETITION','BOOTCAMP']) &&
          (data.entryFee == null || data.entryFee is number) &&
          (data.year == null || data.year is number) &&
          (data.published == null || data.published is bool) &&
          (data.registrationsAvailable == null || data.registrationsAvailable is bool) &&
          (data.participants == null || data.participants is list) &&
          (data.participantCount == null || data.participantCount is number) &&
          (data.featured == null || data.featured is bool) &&
          (data.status == null || data.status in ['active','completed','cancelled','postponed']) &&
          (data.organizers == null || isValidStringLength(data.organizers, 0, 200)) &&
          (data.contactPersons == null || data.contactPersons is list) &&
          (data.searchTitle == null || data.searchTitle is string) &&
          (data.searchDescription == null || data.searchDescription is string);
      }

      // Partial update validator: only allowed keys and createdAt must not change
      function isValidEventUpdate(newData, oldData) {
        return newData.diff(oldData).affectedKeys().hasOnly([
          'title','description','brief','image','cloudinaryUrl','originalImagePath',
          'date','time','venue','category','type','entryFee','organizers',
          'contactPersons','year','published','registrationsAvailable',
          'participants','participantCount','searchTitle','searchDescription',
          'status','featured','updatedAt'
        ]) &&
          newData.createdAt == oldData.createdAt;
      }
    }
    
    // ============================================================================
    // TEAMS (User-created teams for events)
    // ============================================================================
    
    match /teams/{teamId} {
      // Authenticated users can read teams they're part of or created
      allow read: if isAuthenticated() && 
        (resource.data.custid == request.auth.uid || 
         request.auth.uid in resource.data.get('members', []));
      
      // Authenticated users can create teams
      allow create: if isAuthenticated() && 
        isValidTeamData(request.resource.data) &&
        request.resource.data.custid == request.auth.uid &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;
      
      // Team owners can update teams
      allow update: if isAuthenticated() && 
        resource.data.custid == request.auth.uid &&
        isValidTeamUpdate(request.resource.data, resource.data) &&
        request.resource.data.updatedAt == request.time &&
        isWithinRateLimit();
      
      // Only team owners can delete teams
      allow delete: if isAuthenticated() && 
        resource.data.custid == request.auth.uid;
      
      function isValidTeamData(data) {
        return data.keys().hasOnly(['name', 'description', 'custid', 'members', 'maxMembers', 'eventId', 'status', 'createdAt', 'updatedAt']) &&
               isValidStringLength(data.name, 1, 100) &&
               (data.description == null || isValidStringLength(data.description, 0, 500)) &&
               data.custid is string &&
               (data.members == null || (data.members is list && data.members.size() <= 10)) &&
               (data.maxMembers == null || (data.maxMembers is number && data.maxMembers >= 1 && data.maxMembers <= 10)) &&
               (data.eventId == null || data.eventId is string) &&
               (data.status == null || data.status in ['active', 'inactive', 'full']);
      }
      
      function isValidTeamUpdate(newData, oldData) {
        return isValidTeamData(newData) &&
               newData.custid == oldData.custid && // Prevent changing team owner
               newData.createdAt == oldData.createdAt && // Prevent changing creation time
               onlyUpdatingFields(['name', 'description', 'members', 'maxMembers', 'eventId', 'status', 'updatedAt']);
      }
    }
    
    // ============================================================================
    // RECRUITS (Membership applications)
    // ============================================================================
    
    match /recruits/{document=**} {
      // Authenticated users can read recruit data
      allow read: if isAuthenticated();
      
      // Authenticated users can create recruit applications
      allow create: if isAuthenticated() && isValidRecruitData(request.resource.data);
      
      // Authenticated users can update recruit data (for processing applications)
      allow update: if isAuthenticated() && 
        isValidRecruitUpdate(request.resource.data, resource.data);
      
      // Authenticated users can delete recruit data
      allow delete: if isAuthenticated();
      
      function isValidRecruitData(data) {
        return data.keys().hasOnly(['name', 'dateOfBirth', 'usn', 'yearOfStudy', 'branch', 'mobileNumber', 'personalEmail', 'collegeEmail', 'membershipPlan', 'csiIdea', 'paymentStatus', 'paymentId', 'orderId', 'createdAt', 'updatedAt']) &&
               isValidStringLength(data.name, 1, 100) &&
               data.dateOfBirth is timestamp &&
               isValidUSN(data.usn) &&
               isValidStringLength(data.yearOfStudy, 1, 20) &&
               isValidStringLength(data.branch, 1, 100) &&
               isValidPhone(data.mobileNumber) &&
               isValidEmail(data.personalEmail) &&
               (data.collegeEmail == null || isValidEmail(data.collegeEmail)) &&
               isValidStringLength(data.membershipPlan, 1, 50) &&
               isValidStringLength(data.csiIdea, 1, 2000) &&
               (data.paymentStatus == null || data.paymentStatus in ['pending', 'completed', 'failed']) &&
               (data.paymentId == null || isValidStringLength(data.paymentId, 0, 100)) &&
               (data.orderId == null || isValidStringLength(data.orderId, 0, 100)) &&
               (data.createdAt == null || data.createdAt is timestamp) &&
               (data.updatedAt == null || data.updatedAt is timestamp);
      }
      
      function isValidRecruitUpdate(newData, oldData) {
        return isValidRecruitData(newData) &&
               newData.createdAt == oldData.createdAt && // Prevent changing creation time
               // Allow updating payment status and processing fields
               onlyUpdatingFields(['paymentStatus', 'paymentId', 'orderId', 'updatedAt']);
      }
    }
    
    // ============================================================================
    // METADATA (System information)
    // ============================================================================
    
    match /metadata/{document=**} {
      // Public read access for system information
      allow read: if true;
      
      // Authenticated users can write metadata
      allow write: if isAuthenticated();
    }
    
    // ============================================================================
    // GENERAL COLLECTIONS
    // ============================================================================
    
    match /admin/{document=**} {
      // Authenticated users can access admin collections
      allow read, write: if isAuthenticated();
    }
    
    match /logs/{document=**} {
      // Authenticated users can access logs
      allow read, write: if isAuthenticated();
    }
    
    match /analytics/{document=**} {
      // Authenticated users can access analytics
      allow read, write: if isAuthenticated();
    }
    
    // ============================================================================
    // SECURITY: Default deny all other access
    // ============================================================================
    
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Admin OTPs collection
    match /adminOTPs/{email} {
      allow read, write: if request.auth != null; // allow signed-in users
    }

    // Admins collection (optional)
    match /admins/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // Activity logs (optional)
    match /adminActivity/{docId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
    }
  }
}